 Instructions
Assignment 4
Overview

For this assignment, you will develop Java programs to solve several problems. For Problems 1-4, you will also write test cases with which to test those programs.

It is very important that you spell and capitalize the names of the programs exactly as they are given in this assignment. It is also very important that you submit your test cases as a plain-text file.

You will need the IO module to read input from the keyboard and to generate output in a form that our grading program can understand. Do not modify or hand in the IO module. Do not hand in the Dice.java. Zip up your .java files into a file called assign4.zip.

Please limit your discussion of the problems to generic Java syntax questions. You should come up with the algorithms to solve the problems by yourself.



Before you begin, read the document How-To-Use-The-IO-Module-In-Programming-Assignments.html.
 

If you know some Java already, you may use advanced features that we have not covered in class yet (though it is not necessary to do so). However, you may NOT use any modules or classes from outside java.lang (do not add any "import" statements to your programs).
Error conditions

For this assignment, when you detect an error condition, call IO.reportBadInput() and ask for the input again.
Problems
Problem 1

Write your code in the file SmallLargest.java. Write your test cases in assign4-testcases.txt.

We wish to write a program that takes a set of numbers and determines the largest and smallest numbers.

Ask the user for the following information, in this order:

    A terminating value (real number). The user will enter this value again later, to indicate that he or she is finished providing input.
    A sequence of real numbers. Keep asking for numbers until the terminating value is entered.

Compute and output the largest and smallest real number, in that order. It is possible for the largest and smallest numbers to be the same (if the sequence contains all the same numbers). Blue text below indicates notes to you, and are not actually part of the output/input.

Example:

java SmallLargest

123 [this is the terminating value, not part of the set of numbers]
17
23.5
10
15.2
30
8
16
123 [this is the terminating value again, indicating that the user is done]

RESULT: 30.0
RESULT: 8.0

Problem 2

Write your code in the file LuckySevens.java. Write your test cases in assign4-testcases.txt.

Sevens are considered lucky numbers. Your task is to count the number of sevens that appear within a range of numbers. Your solution should make use of looping constructs.

Ask the user for the following information, in this order:

    The lower end of the range
    The upper end of the range

Determine the number of sevens that appear in the sequence from lower end to upper end (inclusive).
Hint: Some numbers have more than 1 seven, and not every 7 appears in the ones place.
Hint2: Nested loops are helpful

Exit on error.

Example:

java LuckySevens

100 
150
RESULT: 5


Problem 3

Write your code in the file NthPrime.java. Write your test cases in assign4-testcases.txt.

A prime number is one that has no divisors other than 1 and itself (no other number divides evenly into the prime number). The 1st (smallest) prime number is 2. The 2nd is 3, the 3rd is 5, etc.

Ask the user for a value n, and compute the nth prime number. You must perform this computation using loops. You MAY NOT hardcode a list of prime numbers into your program.

Examples:

java NthPrime

10

RESULT: 29 
