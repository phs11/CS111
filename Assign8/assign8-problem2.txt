Omar Ahmadi
Assignment 8

problem 2:
---------


Trace selection sort on the following array of letters (sort into alphabetical order):
M U E J R Q X B

1) M U E J R Q X B	7
2) B M U E J R Q X	6 
3) B E M U J R Q X	5 
4) B E J M U R Q X	4 
5) B E J M Q U R X	3
6) B E J M Q R U X	2 
7) B E J M Q R U X	1
			28 comparisons


After each pass (outer loop iteration) of selection sort, show the contents of the array and the number of letter-to-letter comparisons performed on that pass (an exact number, not big-O).

b.	Trace insertion sort on the following array of letters (sort into alphabetical order):
	M U E J R Q X B
	
	1) M U E J R Q X B	1
	2) E M U J R Q X B	3
	3) E J M U R Q X B	2
	4) E J M R U Q X B	1
	6) E J M R Q U X B	1
	7) B E J M Q R U X	7
				15 comparisons


	After each pass (outer loop iteration) of insertion sort, show the contents of the array and the number of letter-to-letter comparisons performed on that pass (an exact number, not big-O).


For each problems segment given below, do the following:

1. Create an algorithm to solve the problem

2. Identify the factors that would influence the running time, and which can be known before the algorithm or code is executed. Assign names (such as n)
to each factor.

3. Identify the operations that must be counted. You need not count every statement separately. If a group of statements always executes together, 
treat the group as a single unit. If a method is called, and you do not know the running time of that method, count it as a single operation.

4. Count the operations performed by the algorithm or code. Express the count as a function of the factors you identified in Step 2. If the count cannot be 
expressed as a simple function of those factors, define the bounds that can be placed on the count: the best case (lower bound) and worst case (upper bound).

5. Determine what the Best Case Inputs are, and the Worst Case Inputs are, and the efficiency of your implementation

6. Transform your count formula into big-O notation by:
	Taking the efficiency with worst case input,
	Dropping insignificant terms.
	Dropping constant coefficients.

a. Determine if 2 arrays contain the same elements
	1. check if both arrays have equal length
	   compare each element in array one to array two
	   if each element at index i is equal in array one and array two until the length is reached then the 2 arrays contain the same elements
	2. n represents the length of the arrays and q the elements being compared to each other.
	3. The operation to be counted are the comparing of the elements between the 2 arrays
	4. f(n) = n*n
	5. Best case - only one element in each array and they are both the same, Worst case = both arrays have a very large length
	6. Worst case - O(n*n) = O(n^2)

b. Counting total number characters that have a duplicate within a string (i.e. "gigi the gato" would result in 7 (g x 3 + i x 2 + t x 2)
	1. Input the string and use a for loop to search each character from the first index to the last (length of string). Compare the first index
	to the others and increase the counter if duplicates are found. Then output the number of duplicate characters within the string.
	2. Factors influencing the running time are: the string length, number of duplicates found
	3. The operations to be counted are: the first for loop incrementing the index number and the second for loop comparing the nth index to the rest,
	searching for duplicates.
	4. f(n) = n*n
	5. Best case - only one character in String and no duplicates, Worst case = Very large string with many duplicates
	6. O(n^2)


c. Finding an empty row in a 2-D array where empty is defined as an element with a 0 entry.
	1. Check every row in the integer 2-D array for entries of 0 in each column.
	2. Factors influencing the running time are: the length of the rows and the length of the columns
	3. The operations to be counted are: the first for loop incrementing rows second for loop incrementing columns and checking for 0 entries
	4. f(n) = m*n
	5. Best case - only one row in and one column to check, Worst case = large amounts of rows and columns
	6. O(m*n)


